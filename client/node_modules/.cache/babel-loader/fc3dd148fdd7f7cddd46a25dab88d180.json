{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Itay\\\\Desktop\\\\proj\\\\shopping\\\\client\\\\src\\\\admin\\\\components\\\\Input.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react'; // MUI\n\nimport { FormControl, TextField, InputAdornment } from '@mui/material'; // CammelCase Helper\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst camelCase = str => {\n  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n}; // COMPONENT\n\n\nconst Input = props => {\n  _s();\n\n  // props\n  const {\n    id,\n    label,\n    inputType,\n    defaultValue,\n    required,\n    camelCased,\n    onChange\n  } = props; // Input state\n\n  const [text, setText] = useState({\n    value: defaultValue || '',\n    error: required && !defaultValue ? '* required' : null\n  });\n\n  const validateChange = event => {\n    let value = event.target.value;\n    let error = null; // validators switch\n\n    switch (inputType) {\n      case 'currency':\n      case 'number':\n        error = isNaN(value) ? 'Only digits allowed' : null;\n        break;\n\n      case 'tel':\n        error = /^0\\d([\\d]{0,1})([-]{0,1})\\d{7}$/.test(value) ? null : 'Incorrect Phone ';\n        break;\n\n      case 'text':\n        break;\n      // TODO\n\n      case 'email':\n        error = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(value) ? null : 'Incorrect Email';\n        break;\n\n      default:\n        break;\n      // TODO\n    } // re set  if necessary\n\n\n    if (value === '') {\n      if (defaultValue) {\n        value = defaultValue;\n        error = null;\n      } else if (required) {\n        error = '* required';\n      }\n    }\n\n    if (camelCased && inputType === 'text') {\n      value = camelCase(value);\n    } // update state\n\n\n    setText({\n      value,\n      error\n    }); // inform parent only when valid\n\n    onChange && onChange(event);\n  };\n\n  return /*#__PURE__*/_jsxDEV(FormControl, {\n    fullWidth: true,\n    children: /*#__PURE__*/_jsxDEV(TextField, {\n      color: \"white\",\n      fullWidth: true,\n      id: id,\n      label: label,\n      type: inputType,\n      value: text.value,\n      onChange: validateChange,\n      size: \"small\",\n      error: !!text.error,\n      helperText: text.error,\n      InputProps: inputType === 'currency' ? {\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\",\n          children: \"$\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 19\n        }, this)\n      } : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Input, \"ZLFxK2A7NQ9gaocpbDy8IqBMDoc=\");\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["C:/Users/Itay/Desktop/proj/shopping/client/src/admin/components/Input.js"],"names":["React","useState","FormControl","TextField","InputAdornment","camelCase","str","charAt","toUpperCase","slice","toLowerCase","Input","props","id","label","inputType","defaultValue","required","camelCased","onChange","text","setText","value","error","validateChange","event","target","isNaN","test","startAdornment"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\n\r\n// MUI\r\nimport { FormControl, TextField, InputAdornment } from '@mui/material';\r\n\r\n// CammelCase Helper\r\nconst camelCase = (str) => {\r\n  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\r\n};\r\n\r\n// COMPONENT\r\nconst Input = (props) => {\r\n  // props\r\n  const { id, label, inputType, defaultValue, required, camelCased, onChange } =\r\n    props;\r\n\r\n  // Input state\r\n  const [text, setText] = useState({\r\n    value: defaultValue || '',\r\n    error: required && !defaultValue ? '* required' : null,\r\n  });\r\n\r\n  const validateChange = (event) => {\r\n    let value = event.target.value;\r\n    let error = null;\r\n\r\n    // validators switch\r\n    switch (inputType) {\r\n      case 'currency':\r\n      case 'number':\r\n        error = isNaN(value) ? 'Only digits allowed' : null;\r\n        break;\r\n      case 'tel':\r\n        error = /^0\\d([\\d]{0,1})([-]{0,1})\\d{7}$/.test(value)\r\n          ? null\r\n          : 'Incorrect Phone ';\r\n        break;\r\n      case 'text':\r\n        break; // TODO\r\n      case 'email':\r\n        error = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(value)\r\n          ? null\r\n          : 'Incorrect Email';\r\n        break;\r\n\r\n      default:\r\n        break; // TODO\r\n    }\r\n\r\n    // re set  if necessary\r\n    if (value === '') {\r\n      if (defaultValue) {\r\n        value = defaultValue;\r\n        error = null;\r\n      } else if (required) {\r\n        error = '* required';\r\n      }\r\n    }\r\n\r\n    if (camelCased && inputType === 'text') {\r\n      value = camelCase(value);\r\n    }\r\n\r\n    // update state\r\n    setText({ value, error });\r\n\r\n    // inform parent only when valid\r\n    onChange && onChange(event);\r\n  };\r\n\r\n  return (\r\n    <FormControl fullWidth>\r\n      <TextField\r\n        color='white'\r\n        fullWidth\r\n        id={id}\r\n        label={label}\r\n        type={inputType}\r\n        value={text.value}\r\n        onChange={validateChange}\r\n        size=\"small\"\r\n        error={!!text.error}\r\n        helperText={text.error}\r\n        InputProps={\r\n          inputType === 'currency'\r\n            ? {\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">$</InputAdornment>\r\n                ),\r\n              }\r\n            : null\r\n        }\r\n      />\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n"]},"metadata":{},"sourceType":"module"}